<div class="row">
    <div class="col">
        <h5>Entity info</h5>
        <div>
            Sick people <b> @(sickPeople) </b>
        </div>
        <div>
            Healthy people <b> @(healthyPeople) </b>
        </div>
        <div>
            Initial people <b> @(initialPeople) </b>
        </div>
        <div>
            Current total people <b> @(currentTotalPeople) </b>
        </div>
        @* TODO Add death rate *@
        @* TODO Add recovery rate *@
    </div>
    <div class="col">
        <h5>Loops/s</h5>
        @for (int i = 0; i < loopsDone.Length; i++)
        {
            <div>
                Thread @i : @loopsDone[i]
            </div>
        }
    </div>
    <div class="col">
        <h5>Avg loops/s/thread</h5>
        <div>@(updateCount > 0 ? loopSum / updateCount / (ulong)loopsDone.Length : 0)</div>
    </div>
</div>



@code {
    private ushort sickPeople  = 0;
    private ushort healthyPeople = 0;
    public ushort initialPeople { get; set; } = 0;
    private ushort currentTotalPeople = 0;
    private ulong[] loopsDone = new ulong[0];
    private ulong loopSum = 0;
    private ulong updateCount = 0;

    public async Task setNewData(ushort newSickPeople, ushort newHealthyPeople, ulong[] loopsDone)
    {
        this.sickPeople = newSickPeople;
        this.healthyPeople = newHealthyPeople;
        this.loopsDone = loopsDone;
        loopSum = loopsDone.Aggregate(loopSum, (agr, item) => agr + item);
        updateCount += 1;

        currentTotalPeople = (ushort)(newSickPeople + newHealthyPeople);
        await InvokeAsync(StateHasChanged);
    }

    public void ResetCoreData() {
        loopsDone =  new ulong[0];
        loopSum =  0;
        updateCount =  0;
        initialPeople = 0;
    }
}
