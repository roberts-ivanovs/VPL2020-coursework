@page "/"
@using System.Diagnostics

<div class="row">
    <div class="col text-center">
        <h1>Simulation</h1>
        <div>Perform a simple disease transimssion simulation </div>
    </div>
</div>
<div class="row mb-3">
    <div class="col-6">
        <div class="card">
            <div class="card-header">
                Settings
            </div>
            <div class="container-fluid mx-auto pt-3 pb-3">
                <div>
                    <div>
                        Initial population = @InitialPopulation
                    </div>
                    <div>
                        <input type="range" min="0" max="1000" step="1" disabled="@(!inputsEnabled)" class="form-range"
                            @bind="InitialPopulation" @bind:event="oninput" @onchange="HandleGlobalPopulationChange" />
                    </div>
                </div>
                <div>
                    <div>
                        Initial sick people = @InitialSickPeople / @InitialPopulation
                    </div>
                    <div>
                        <input type="range" min="0" max="@InitialPopulation" step="1" disabled="@(!inputsEnabled)"
                            class="form-range" @bind="InitialSickPeople" @bind:event="oninput" />
                    </div>
                </div>
                <div>
                    <div>
                        Time Scale = @TimeScale
                    </div>
                    <div>
                        <input type="range" min="0" max="5" step="0.1" @bind="TimeScale" class="form-range"
                            @bind:event="oninput" />
                    </div>
                </div>
                <div>
                    <div>
                        Data polling rate = @renderCanvasAfterEveryMiliseconds (ms)
                    </div>
                    <div>
                        <input type="range" min="10" max="1000" step="10" @bind="renderCanvasAfterEveryMiliseconds"
                            class="form-range" @bind:event="oninput" />
                    </div>
                </div>
                <hr />
                <div>
                    <h3>Enabled pipelines</h3>
                    <div class="row">
                        <div class="col">
                            <div>
                                <input disabled="@(!inputsEnabled)" @bind="tickingPipeline" type="checkbox" class="form-check-input" id="btncheck1" autocomplete="off">
                                <label class="form-check-label" for="btncheck1">Entity inner clock</label>
                            </div>

                            <div>
                                <input disabled="@(!inputsEnabled)" @bind="geoLocationPipeline" type="checkbox" class="form-check-input" id="btncheck2" autocomplete="off">
                                <label class="form-check-label" for="btncheck2">Geolocation</label>
                            </div>

                            <div>
                                <input disabled="@(!inputsEnabled)" @bind="assertionPipeline"  type="checkbox" class="form-check-input" id="btncheck3" autocomplete="off">
                                <label class="form-check-label" for="btncheck3">Runtime type check</label>
                            </div>
                        </div>
                        <div class="col">

                            <div>
                                <input disabled="@(!inputsEnabled)" @bind="deathPipeline"  type="checkbox" class="form-check-input" id="btncheck4" autocomplete="off">
                                <label class="form-check-label" for="btncheck4">Disease can kill</label>
                            </div>

                            <div>
                                <input disabled="@(!inputsEnabled)" @bind="infectionPipeline"  type="checkbox" class="form-check-input" id="btncheck5" autocomplete="off">
                                <label class="form-check-label" for="btncheck5">Disease can spread</label>
                            </div>

                            <div>
                                <input disabled="@(!inputsEnabled)" @bind="recoveryPipeline"  type="checkbox" class="form-check-input" id="btncheck6" autocomplete="off">
                                <label class="form-check-label" for="btncheck6">Recovery possible</label>
                            </div>
                        </div>
                        <div class="col">
                            <div>
                                <input disabled="@(!inputsEnabled)" @bind="healthyAttractorPipeline"  type="checkbox" class="form-check-input" id="btncheck7" autocomplete="off">
                                <label class="form-check-label" for="btncheck7">Healthy attractors</label>
                            </div>
                            <div>
                                <input disabled="@(!inputsEnabled)" @bind="sickAttractorPipeline"  type="checkbox" class="form-check-input" id="btncheck10" autocomplete="off">
                                <label class="form-check-label" for="btncheck7">Sick attractors</label>
                            </div>

                            <div>
                                <input disabled="@(!inputsEnabled)" @bind="zombieModePipeline"  type="checkbox" class="form-check-input" id="btncheck8" autocomplete="off">
                                <label class="form-check-label" for="btncheck8">Zombie mode</label>
                            </div>

                            <div>
                                <input disabled="@(!inputsEnabled)" @bind="quarantinePipeline"  type="checkbox" class="form-check-input" id="btncheck9" autocomplete="off">
                                <label class="form-check-label" for="btncheck9">Sick entity quarantine</label>
                            </div>
                        </div>
                    </div>
                </div>
                <hr />
                <div>
                    <p>Number of regions
                        <b>
                            @(simulation == null ? "unknown" : this.simulation.NumberOfCores.ToString())
                        </b>

                        <input disabled="@(!inputsEnabled)" @bind="singleCore" type="checkbox" class="form-check-input" id="singleCore" autocomplete="off">
                        <label class="form-check-label" for="singleCore">Force-use only 1 region</label>
                    </p>
                </div>
                <hr />
                <div class="d-grid gap-2">
                    <button type="button" @onclick="StartSimulation" disabled="@(!startButtonEnabled)"
                        class="btn @(startButtonEnabled ? " btn-success" : "btn-secondary" )">
                        <span class="oi oi-media-play">
                            START
                        </span>
                    </button>
                    <button type="button" @onclick="StopSimulation" disabled="@(!stopButtonEnabled)"
                        class="btn @(stopButtonEnabled ? " btn-danger" : "btn-secondary" )">
                        <span class="oi oi-media-stop">
                            STOP
                        </span>
                    </button>
                </div>

            </div>
        </div>
        <div class="card mt-3">
            <div class="card-header">
                Statistics
            </div>
            <div class="card-body">
                <Statistics @ref="_statistics" />
            </div>
        </div>
    </div>


    <div class="col-6">
        <div class="card">
            <div class="card-header">
                Canvas
            </div>
            <div class="card-body mx-auto">
                <Canvas @ref="EntityCanvas" />
            </div>
        </div>
    </div>
</div>



@code {
    private World simulation;
    private ushort InitialPopulation { get; set; } = 100;
    private ushort InitialSickPeople { get; set; } = 5;
    private float TimeScale { get; set; } = 1f;
    private bool stopButtonEnabled { get; set; } = false;
    private bool startButtonEnabled { get; set; } = true;
    private bool inputsEnabled { get; set; } = true;
    private bool singleCore { get; set; } = false;

    private int renderCanvasAfterEveryMiliseconds { get; set;} = 50;
    private Canvas EntityCanvas;
    private Statistics _statistics;

    /* Pipeline flags */
    private bool tickingPipeline { get; set; } = true;
    private bool geoLocationPipeline { get; set; } = true;
    private bool deathPipeline { get; set; } = true;
    private bool infectionPipeline { get; set; } = true;
    private bool zombieModePipeline { get; set; } = false;
    private bool recoveryPipeline { get; set; } = true;
    private bool assertionPipeline { get; set; } = true;
    private bool healthyAttractorPipeline { get; set; } = true;
    private bool sickAttractorPipeline { get; set; } = false;
    private bool quarantinePipeline { get; set; } = true;

    void HandleGlobalPopulationChange(ChangeEventArgs e)
    {
        if (ushort.TryParse((string)e.Value, out var value))
        {
            if (value < InitialSickPeople)
            {
                InitialSickPeople = value;
            }
        }
    }

    async void StartSimulation()
    {
        /* Construct the pipelines */
        var pipelines = new List<Pipeline>();
        if (tickingPipeline)
            pipelines.Add(new TickingPipeline());
        if (deathPipeline)
            pipelines.Add(new DeathPipeline());
        if (infectionPipeline)
            pipelines.Add(new InfectionPipeline());
        if (recoveryPipeline)
            pipelines.Add(new RecoveryPipeline());
        if (assertionPipeline)
            pipelines.Add(new AssertionPipeline());
        if (healthyAttractorPipeline || sickAttractorPipeline)
            pipelines.Add(new AttractorPipeline(sickAttractorPipeline, healthyAttractorPipeline));
        if (zombieModePipeline)
            pipelines.Add(new ZombieModePipeline());
        if (quarantinePipeline)
            pipelines.Add(new QuarantinePipeline());
        if (geoLocationPipeline)
            pipelines.Add(new GeoLocationPipeline());


        /* Construct the World object */
        simulation = new World(
            (ushort)(InitialPopulation - InitialSickPeople),
            InitialSickPeople,
            TimeScale,
            singleCore,
            pipelines);
        simulation.Start();
        stopButtonEnabled = true;
        startButtonEnabled = false;
        inputsEnabled = false;
        _statistics.ResetCoreData();
        _statistics.initialPeople = InitialPopulation;
        await ReloadInformation();
    }

    void StopSimulation()
    {
        if (simulation != null)
        {
            stopButtonEnabled = false;
            startButtonEnabled = true;
            inputsEnabled = true;
            simulation.Stop();
        }
    }

    async Task ReloadInformation()
    {
        await Task.Run(async () =>
            {
            var sw = new Stopwatch();
            sw.Start();
            var before = 0L;
            while (!startButtonEnabled)
            {
                var now = sw.ElapsedMilliseconds;
                var rerender = now - before > renderCanvasAfterEveryMiliseconds;
                if (rerender)
                {
                    before = now;
                    var gameState = simulation.GetCurrentState();
                    /* Adjust the timing to be `loops per second` */
                    var loopsPerSecond = gameState.loopsDone
                        .Select(x => x * 1000 / (ulong)renderCanvasAfterEveryMiliseconds )
                        .ToArray();
                    simulation.timeScale = TimeScale;
                    await _statistics.setNewData(gameState.sickPeople, gameState.healthyPeople, loopsPerSecond);
                    await EntityCanvas.DisplayItems(gameState.items);
                }
            }
        });
    }


}
