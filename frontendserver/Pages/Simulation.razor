@page "/"
@using System.Diagnostics

<div class="row">
    <div class="col">
        <h1>Simulation</h1>
        <p>Perform a simple disease transimssion simulation </p>
    </div>
</div>
<div class="row">
    <div class="col-4">
        <div class="card">
            <div class="card-header">
                Settings
            </div>
            <div class="container-fluid mx-auto pt-3 pb-3">
                <div>
                    <div>
                        Initial population = @InitialPopulation
                    </div>
                    <div>
                        <input type="range" min="0" max="500" step="1" disabled="@(!inputsEnabled)"
                            class="form-range" @bind="InitialPopulation" @bind:event="oninput"
                            @onchange="HandleGlobalPopulationChange" />
                    </div>
                </div>
                <div>
                    <div>
                        Initial sick people = @InitialSickPeople / @InitialPopulation
                    </div>
                    <div>
                        <input type="range" min="0" max="@InitialPopulation" step="1" disabled="@(!inputsEnabled)"
                            class="form-range" @bind="InitialSickPeople" @bind:event="oninput" />
                    </div>
                </div>
                <div>
                    <div>
                        Time Scale = @TimeScale
                    </div>
                    <div>
                        <input type="range" min="0" max="5" step="0.1" @bind="TimeScale" class="form-range"
                            @bind:event="oninput" />
                    </div>
                </div>
                <hr/>
                <div>
                    <p>Number of cores <b> @(simulation == null ? "unknown" : World.NumberOfCores.ToString()) </b> </p>
                </div>
                <hr/>
                <div class="d-grid gap-2">
                    <button type="button" @onclick="StartSimulation" disabled="@(!startButtonEnabled)"
                        class="btn @(startButtonEnabled ? "btn-success" : "btn-secondary")">
                        <span class="oi oi-media-play">
                            START
                        </span>
                    </button>
                    <button type="button" @onclick="StopSimulation" disabled="@(!stopButtonEnabled)"
                        class="btn @(stopButtonEnabled ? "btn-danger" : "btn-secondary")">
                        <span class="oi oi-media-stop">
                            STOP
                        </span>
                    </button>
                </div>

            </div>
        </div>
        <div class="card mt-3">
            <div class="card-header">
                Statistics
            </div>
            <div class="card-body">
                <Statistics @ref="_statistics" />
            </div>
        </div>
    </div>


    <div class="col-8">
        <div class="card">
            <div class="card-header">
                Canvas
            </div>
            <div class="card-body mx-auto">
                <Canvas @ref="EntityCanvas" />
            </div>
        </div>
    </div>
</div>


@code {
    private World simulation;
    private ushort InitialPopulation { get; set; } = 100;
    private ushort InitialSickPeople { get; set; } = 5;
    private float TimeScale { get; set; } = 1f;
    private bool stopButtonEnabled { get; set; } = false;
    private bool startButtonEnabled { get; set; } = true;
    private bool inputsEnabled { get; set; } = true;

    private int renderCanvasAfterEveryMiliseconds { get; } = 100;
    private Canvas EntityCanvas;
    private Statistics _statistics;

    void HandleGlobalPopulationChange(ChangeEventArgs e)
    {
        if (ushort.TryParse((string)e.Value, out var value))
        {
            if (value < InitialSickPeople)
            {
                InitialSickPeople = value;
            }
        }
    }

    async void StartSimulation()
    {
        simulation = new World((ushort)(InitialPopulation - InitialSickPeople), InitialSickPeople, TimeScale);
        simulation.Start();
        stopButtonEnabled = true;
        startButtonEnabled = false;
        inputsEnabled = false;
        await ReloadInformation();
    }

    void StopSimulation()
    {
        if (simulation != null)
        {
            stopButtonEnabled = false;
            startButtonEnabled = true;
            inputsEnabled = true;
            simulation.Stop();
        }
    }

    async Task ReloadInformation()
    {
        await Task.Run(async () =>
            {
            var sw = new Stopwatch();
            sw.Start();
            var before = 0L;
            while (!startButtonEnabled)
            {
                var now = sw.ElapsedMilliseconds;
                var rerender = now - before > renderCanvasAfterEveryMiliseconds;
                if (rerender)
                {
                    before = now;
                    var gameState = simulation.GetCurrentState();
                    simulation.timeScale = TimeScale;
                    await _statistics.setNewData(gameState.sickPeople, gameState.healthyPeople);
                    await EntityCanvas.DisplayItems(gameState.items);
                }
            }
        });
    }


}
