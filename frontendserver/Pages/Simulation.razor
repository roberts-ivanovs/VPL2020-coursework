@page "/"
@using System.Threading
@using System.Linq
@using System.Diagnostics

<h1>Simulation</h1>

<p>Perform a simple simulation of the COVID disease </p>

<div class="container">
    <div class="row">
        <div class="col-8">
            <Canvas @ref="EntityCanvas" />
        </div>

        <div class="col-4">
            <div>
                <div>
                    Initial population = @InitialPopulation
                </div>
                <div>
                    <input type="range" min="0" max="500" step="1" disabled="@(!inputsEnabled)"
                        @bind="InitialPopulation" @bind:event="oninput" @onchange="HandleGlobalPopulationChange" />
                </div>
            </div>
            <div>
                <div>
                    Initial sick people = @InitialSickPeople / @InitialPopulation
                </div>
                <div>
                    <input type="range" min="0" max="@InitialPopulation" step="1" disabled="@(!inputsEnabled)"
                        @bind="InitialSickPeople" @bind:event="oninput" />
                </div>
            </div>
            <div>
                <div>
                    Time Scale = @TimeScale
                </div>
                <div>
                    <input type="range" min="0" max="100" step="0.1" disabled="@(!inputsEnabled)" @bind="TimeScale"
                        @bind:event="oninput" />
                </div>
            </div>
            <div>
                <p>Number of cores @(simulation == null ? "unknown" : World.NumberOfCores.ToString())</p>
            </div>
            <div>
                <button type="button" @onclick="StartSimulation" disabled="@(!startButtonEnabled)">
                    START
                </button>
                <button type="button" @onclick="StopSimulation" disabled="@(!stopButtonEnabled)">
                    STOP
                </button>
            </div>
            <div>
                Sick people @(gameState.sickPeople)
            </div>
            <div>
                Healthy people @(gameState.healthyPeople)
            </div>
        </div>
    </div>
</div>

@code {
    private GameState gameState;
    private World simulation;
    private ushort InitialPopulation { get; set; } = 100;
    private ushort InitialSickPeople { get; set; } = 5;
    private float TimeScale { get; set; } = 1f;
    private bool stopButtonEnabled { get; set; } = false;
    private bool startButtonEnabled { get; set; } = true;
    private bool inputsEnabled { get; set; } = true;

    private int renderCanvasAfterEveryMiliseconds {get;} = 100;
    private Canvas EntityCanvas;

    void HandleGlobalPopulationChange(ChangeEventArgs e)
    {
        if (ushort.TryParse((string)e.Value, out var value))
        {
            if (value < InitialSickPeople)
            {
                InitialSickPeople = value;
            }
        }
    }

    async void StartSimulation()
    {
        simulation = new World((ushort)(InitialPopulation - InitialSickPeople), InitialSickPeople, TimeScale);
        simulation.Start();
        stopButtonEnabled = true;
        startButtonEnabled = false;
        inputsEnabled = false;
        await ReloadInformation();
    }

    void StopSimulation()
    {
        if (simulation != null)
        {
            stopButtonEnabled = false;
            startButtonEnabled = true;
            inputsEnabled = true;
            simulation.Stop();
        }
    }

    async Task ReloadInformation()
    {
        await Task.Run(async () => await RoutinelySnapshotData());
    }

    async Task RoutinelySnapshotData()
    {
        var sw = new Stopwatch();
        sw.Start();
        var before = 0L;
        while (!startButtonEnabled)
        {
            var now = sw.ElapsedMilliseconds;
            var rerender = now - before > renderCanvasAfterEveryMiliseconds;
            if (rerender) {
                before = now;
                gameState = simulation.GetCurrentState();
                await Task.Run(async () => await EntityCanvas.DrawItems(gameState.items));
                await InvokeAsync(StateHasChanged);
            }
        }
    }

}
